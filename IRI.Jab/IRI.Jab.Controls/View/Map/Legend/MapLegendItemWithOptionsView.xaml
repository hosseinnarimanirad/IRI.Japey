<UserControl x:Class="IRI.Jab.Controls.View.MapLegendItemWithOptionsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:IRI.Jab.Controls" x:Name="root"
             xmlns:model="clr-namespace:IRI.Jab.Common.Model.Legend;assembly=IRI.Jab.Common"
             xmlns:my="clr-namespace:IRI.Jab.Controls.Assets.Converters"
             xmlns:mahApp="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro" 
             FontFamily="{StaticResource iranSans}">
     
    <Grid IsEnabled="{Binding ElementName=root, Path=Symbology.IsInScaleRange}">
        <Grid.Resources>
            <Style  TargetType="{x:Type Button}" x:Key="circleButton">
                <Setter Property="Margin" Value="4"/>
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent3}"/>
                <Setter Property="Width" Value="30"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Ellipse Margin="1" Fill="{TemplateBinding Property=Background}"/>
                                <ContentPresenter/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <DataTemplate DataType="{x:Type model:LegendToggleCommand}">
                <ToggleButton VerticalAlignment="Center" Margin="2" Cursor="Hand" BorderThickness="0" Focusable="False" ToolTip="{Binding ToolTip}"
                              IsChecked="{Binding IsSelected, Mode=TwoWay}" IsEnabled="{Binding IsEnabled}"
                              Visibility="{Binding IsCommandVisible, Converter={StaticResource boolToVisibilityConverter}}">
                    <ToggleButton.Style>
                        <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent3}"/>
                            <Setter Property="Width" Value="30"/>
                            <Setter Property="Height" Value="30"/>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Grid>
                                            <Ellipse Margin="1" Fill="{TemplateBinding Property=Background}"/>
                                            <ContentPresenter/>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent}"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="LightGray"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>

                    <Path Stretch="Uniform" Fill="{Binding Foreground,RelativeSource={RelativeSource AncestorType=ToggleButton, Mode=FindAncestor}}" Width="16" Height="16" FlowDirection="LeftToRight">
                        <Path.Style>
                            <Style TargetType="{x:Type Path}" >
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton, Mode=FindAncestor}}" Value="True">
                                        <Setter Property="Data" Value="{Binding PathMarkup}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton, Mode=FindAncestor}}" Value="False">
                                        <Setter Property="Data" Value="{Binding NotCheckedPathMarkup}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Path.Style>
                    </Path>
                </ToggleButton>
            </DataTemplate>
            <DataTemplate DataType="{x:Type model:LegendCommand}">
                <Button Style="{StaticResource circleButton}" VerticalAlignment="Center" Margin="1" Cursor="Hand" Command="{Binding Command}" IsEnabled="{Binding IsEnabled}" 
                        BorderThickness="0" Focusable="False"  ToolTip="{Binding ToolTip}"
                        Visibility="{Binding IsCommandVisible, Converter={StaticResource boolToVisibilityConverter}}">
                    <Path Data="{Binding PathMarkup}" Stretch="Uniform" Fill="White" Width="16" Height="16" FlowDirection="LeftToRight"/>
                </Button>
            </DataTemplate>
            <my:ILayerToLegendConverter x:Key="iLayerToLegendConverter"/> 
        </Grid.Resources>
        
        <TextBlock MinWidth="30" VerticalAlignment="Center" Margin="4" 
                   Text="{Binding ElementName=root, Path=Title}" 
                   FontSize="{Binding ElementName=root, Path=TitleFontSize}"
                   Visibility="{Binding IsGroupLayer, Converter={StaticResource boolToVisibilityConverter}, ConverterParameter=True}"/>
        <StackPanel HorizontalAlignment="Stretch" Margin="0" Visibility="{Binding IsGroupLayer, Converter={StaticResource boolToVisibilityConverter}, ConverterParameter=False}">
            <StackPanel Orientation="Horizontal" >
                <CheckBox Margin="4" IsChecked="{Binding ElementName=root, Path=Symbology.Visibility, Mode=TwoWay, Converter={StaticResource visibilityToBoolConverter}}"/>
                <Border Margin="0,0,4,0" Width="17" Height="17" BorderThickness="1"
                        Background="Transparent" Cursor="Hand">
                    <Border.Style>
                        <Style TargetType="Border">
                            <Setter Property="BorderBrush" Value="LightGray"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="DarkGray"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    <Border.InputBindings>
                        <MouseBinding MouseAction="LeftClick" Command="{Binding ChangeSymbologyCommand}" CommandParameter="{Binding}"/>
                    </Border.InputBindings>
                    <Path Margin="1" Data="{Binding Type, Converter={StaticResource iLayerToLegendConverter}}"
                            Fill="{Binding ElementName=root, Path=Symbology.Fill}" Stroke="{Binding ElementName=root, Path=Symbology.Stroke}"
                            StrokeThickness="{Binding ElementName=root, Path=Symbology.StrokeThickness}"
                            HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="{Binding ElementName=root, Path=Symbology.Opacity}"/>
                </Border>
                <Slider VerticalAlignment="Center" Width="50" Minimum="0" Maximum="1" SmallChange=".1" LargeChange=".2"                         
                        TickFrequency=".2" Value="{Binding ElementName=root, Path=Symbology.Opacity, Mode=TwoWay}"/>
                <TextBlock MinWidth="30" VerticalAlignment="Center" Margin="4" 
                           Text="{Binding ElementName=root, Path=Title}" 
                           FontSize="{Binding ElementName=root, Path=TitleFontSize}"
                           Visibility="{Binding ElementName=root, Path=IsEditable, Converter={StaticResource boolToVisibilityConverter}, ConverterParameter=False}"/>
                <TextBlock VerticalAlignment="Center"
                           Text="{Binding NumberOfSelectedFeatures, Converter={StaticResource latinDigitsToFarsiDigitsConverter}, StringFormat={}({0})}" 
                           FontSize="{Binding ElementName=root, Path=TitleFontSize}"
                           Visibility="{Binding NumberOfSelectedFeatures, Converter={StaticResource intGreaterThanIntParameterToVisibilityConverter}, ConverterParameter=0}"/>
                <TextBox BorderThickness="1" Padding="0" VerticalAlignment="Center" MinWidth="70"
                         Text="{Binding ElementName=root, Path=Title, Mode=TwoWay}" 
                         FontSize="{Binding ElementName=root, Path=TitleFontSize}"
                         Visibility="{Binding ElementName=root, Path=IsEditable, Converter={StaticResource boolToVisibilityConverter}}"
                         mahApp:TextBoxHelper.Watermark="عنوان" Margin="4" mahApp:TextBoxHelper.SelectAllOnFocus="True">
                    <TextBox.Resources>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="CornerRadius" Value="4"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Margin" Value="1"/>
                            <Setter Property="Padding" Value="0"/>
                        </Style>
                    </TextBox.Resources>
                </TextBox>
            </StackPanel>
            <ItemsControl Visibility="{Binding IsChecked, ElementName=root, Converter={StaticResource boolToVisibilityConverter}}" BorderBrush="Black" BorderThickness="0,0,0,0"
                            Margin="6,0,0,6" ItemsSource="{Binding ElementName=root, Path=Commands}" >
                <!--<ItemsControl.Resources>
                    <Style TargetType="Button">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="Transparent">
                                        <ContentPresenter/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="BorderThickness" Value="0"/> 
                    </Style>
                </ItemsControl.Resources>-->
                
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </StackPanel>
        <!--</RadioButton>-->
    </Grid>
</UserControl>
