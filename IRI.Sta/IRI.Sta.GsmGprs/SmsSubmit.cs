using System;
using System.Text;
using IRI.Ket.GsmGprsCommunication.TpduParameters;

namespace IRI.Ket.GsmGprsCommunication
{
    public class SmsSubmit
    {
        //*********************GSM 03.40v5.8.1 Release 1996*********************
        //
        //
        //Basic Elemnts of the SMS-Submit Type:
        //
        //ABBR.     REFERENCE                   PROVISION   REPRESENTATION
        //-----     ---------                   ---------   --------------
        //TP_MTI    Message Type Indicator      Mandatory   2 bits
        //TP_RD     Reject Duplicates           Mandatory   bit
        //TP_VPF    Validity Period Format      Mandatory   2 bit
        //TP_RP     Reply Path                  Mandatory   bit
        //TP_UDHI   User Data Header Indicator  Optional    bit
        //TP_SRR    Status Report Request       Optional    bit
        //TP_MR     Message Reference           Mandatory   Integer
        //TP_DA     Destination Address         Mandatory   2-12 Octets
        //TP_PID    Protocol Identifier         Mandatory   Octets
        //TP_DCS    Data Coding Scheme          Mandatory   Octets
        //TP_VP     Validity Period             Optional    Octet/ 7 Octets
        //TP_UDL    User Data Length            Mandatory   Integer
        //TP_UD     User Data                   Optional   Dependent on the TP-DCS

        //----------------TP-MR-------------------//
        //The TP-Message-Reference field gives an integer representation of a reference number of the
        //SMS-SUBMIT or SMS-COMMAND submitted to the SC by the MS. The MS increments
        //TP-Message-Reference by 1 for each SMS-SUBMIT or SMS-COMMAND being submitted. The value to
        //be used for each SMS-SUBMIT is obtained by reading the Last-Used-TP-MR value from the SMS Status
        //data field in the SIM (see GSM 11.11) and incrementing this value by 1. After each SMS-SUBMIT has
        //been submitted to the network, the Last-Used-TP-MR value in the SIM is updated with the TP-MR that
        //was used in the SMS-SUBMIT operation. The reference number may possess values in the range 0 to
        //255. The value in the TP-MR assigned by the MS is the same value which is received at the SC.
        //In the case where no acknowledgement or an appropriate RP-Error is received in response to an
        //SMS-SUBMIT or SMS-COMMAND, then the MS may automatically repeat the SMS-SUBMIT or
        //SMS-COMMAND but must use the same TP-MR value. The number of times the MS may repeat the
        //SMS-SUBMIT or SMS-COMMAND is an implementation matter.
        //If all automatic attempts fail (including the case where no automatic repeat is provided), the user shall be
        //informed. The failed message shall be stored in the mobile in such a way that the user can request a
        //retransmission using the same TP-MR value, without needing to re-enter any information. Such storage
        //need only be provided for a single failed message, the one most recently attempted.
        //The SC may discard an SMS-SUBMIT or SMS-COMMAND which has the same TP-MR value as the
        //previous SMS-SUBMIT or SMS-COMMAND received from the same originating address.
        //A Phase 2 or later ME using a Phase 1 SIM cannot read or update the TP-Message-Reference from/to the
        //SIM, and so the ME shall always retain the Last-Used-TP-MR value in its own memory, to be used only in
        //the case of a Phase 1 SIM.
        //The SMS-STATUS-REPORT also contains a TP-Message-Reference field. The value sent to the MS will
        //be the same as the TP-Message-Reference value generated by the MS in the earlier SMS-SUBMIT or
        //SMS-COMMAND to which the status report relates.

        //----------------TP-DA-------------------//
        //Is formatted according to the formatting rules of address fields.

        //----------------TP-PID------------------//
        //consist of one octet, and the bits in the octet are used as folloews:
        //MORE ON P.42, GSM 03.40


        //----------------TP-UDL------------------//
        //An integer representation of the number of characters within the TP_UD

        //firstOctet
        private static readonly TP_MessageTypeIndicator m_MessageTypeIndicator = TP_MessageTypeIndicator.SmsSubmit;

        private TP_RejectDuplicates m_RejectDuplicates = TP_RejectDuplicates.AcceptDuplicates;

        private TP_ValidityPeriodFormat m_ValidityPeriodFormat = TP_ValidityPeriodFormat.Relative;

        private TP_StatusReportRequest m_StatusReportRequest = TP_StatusReportRequest.StatusReportIsNotRequested;

        private TP_UserDataHeaderIndicator m_UserDataHeaderIndicator = TP_UserDataHeaderIndicator.UserDataWithNoHeader;

        private TP_ReplyPath m_ReplyPath = TP_ReplyPath.ReplyPathNotSet;
        //end of first octet

        private int m_MessageReferece = 0;

        private AddressField.Address DestinationAddress;

        private TP_ProtocolIdentifier m_ProtocolIdentifier = TP_ProtocolIdentifier.NoInterworking;

        private TP_DataCodingScheme m_DataCodingScheme = TP_DataCodingScheme.UCS2Coding;

        private IValidityPeriod m_ValidityPeriod = TP_RelativeValidityPeriod.Maximum;

        private int m_UserDataLength;

        private string m_UserData;

        private string pduCode;

        public SmsSubmit(long smscNumber, AddressField.Address destinationNumber, string message)
        {
            string result = PduEncoder.EncodeServiceCenterNumber(new AddressField.Address(smscNumber));

            result += ((int)m_MessageTypeIndicator +
                        (int)m_RejectDuplicates +
                        (int)m_ValidityPeriodFormat +
                        (int)m_StatusReportRequest +
                        (int)m_UserDataHeaderIndicator +
                        (int)m_ReplyPath).ToString("X2");

            result += ((int)m_MessageReferece).ToString("X2");

            result += destinationNumber.ToString();

            result += ((int)m_ProtocolIdentifier).ToString("X2");

            result += m_DataCodingScheme.OctetRepresentation;

            result += m_ValidityPeriod.OctetRepresentation;

            //in the case of UCS2
            result += (message.Length * 2).ToString("X2");

            result += PduEncoder.EncodeUCS2(message);

            this.pduCode = result;

        }

        public string PduCode
        {
            get { return this.pduCode; }
        }


    }
}
